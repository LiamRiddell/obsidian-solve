// AUTOGENERATED FILE
// This file was generated from Datetime.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface DatetimeActionDict<T> extends BaseActionDict<T> {
  Expression?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Addition?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  Subtraction?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  Primitive?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Timespan?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Now?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Today?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Tomorrow?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Yesterday?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Datetime?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  NextDayOfWeek?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  LastDayOfWeek?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  TimeUnitUntilDate?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  TimeUnitSinceDate?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  oneDigit?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  twoDigit?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  fourDigit?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: NonterminalNode) => T;
  time?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: NonterminalNode) => T;
  datetimeFormatIso?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: NonterminalNode, arg5: IterationNode) => T;
  datetimeFormatEuropeanOrUs?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: NonterminalNode, arg5: IterationNode) => T;
  add?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  subtract?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  now?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  today?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  tomorrow?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  yesterday?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  dayOfWeek?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  monday?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  tuesday?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  wednesday?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  thursday?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  friday?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  saturday?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  sunday?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  unitsOfTime?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  year?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  month?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  week?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  day?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  hour?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  minute?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  second?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  millisecond?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  until?: (this: NonterminalNode, arg0: TerminalNode) => T;
  since?: (this: NonterminalNode, arg0: TerminalNode) => T;
  number_fract?: (this: NonterminalNode, arg0: IterationNode, arg1: TerminalNode, arg2: IterationNode) => T;
  number_whole?: (this: NonterminalNode, arg0: IterationNode) => T;
  number?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  integer?: (this: NonterminalNode, arg0: IterationNode) => T;
}

export interface DatetimeSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: DatetimeActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: DatetimeActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: DatetimeActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: DatetimeActionDict<T>): this;
}

export interface DatetimeGrammar extends Grammar {
  createSemantics(): DatetimeSemantics;
  extendSemantics(superSemantics: DatetimeSemantics): DatetimeSemantics;
}

declare const grammar: DatetimeGrammar;
export default grammar;

