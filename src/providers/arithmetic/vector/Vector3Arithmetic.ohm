include '../basic/BasicArithmetic.ohm'

Vector3Arithmetic <: BasicArithmetic {
  // Remove support for logical shift
  Expression 
  	:=  AS

  P
    := "(" Expression ")"  -- parenthesis
    | Vector3
    | Function
    | Primitive

  // Remove modulo support for vector
  MD
    := MD multiply E  -- multiplication
    | MD divide E  -- division
    | E

  Vector3
    = vector3? "(" Expression "," Expression "," Expression ")" -- parse

  Function
   = LengthSq
   | DistanceSq
   | Length
   | Distance
   | Normalise
   | Dot
   | AngleBetween
   | Cross
   | Lerp

  LengthSq  = lengthSq "(" Vector3 ")" -- function
  DistanceSq  = distanceSq "(" Vector3 "," Vector3 ")" -- function
  Length  = length "(" Vector3 ")" -- function
  Distance  = distance "(" Vector3 "," Vector3 ")" -- function
  Normalise = normalise "(" Vector3 ")" -- function
  Dot = dot "(" Vector3 "," Vector3 ")" -- function
  AngleBetween = angleBetween "(" Vector3 "," Vector3 ")" -- function
  Cross = cross "(" Vector3 "," Vector3 ")" -- function
  Lerp = lerp "(" Vector3 "," Vector3 "," number ")" -- function

  vector3 
 	  = caseInsensitive<"Vector3">
    | caseInsensitive<"Vec3">

  lengthSq 
 	  = caseInsensitive<"lengthSq">
    | caseInsensitive<"magnitudeSq">

  distanceSq
    = caseInsensitive<"distanceSq">

  length
 	  = caseInsensitive<"length">
    | caseInsensitive<"magnitude">

  distance
    = caseInsensitive<"distance">

  normalise 
 	  = caseInsensitive<"normalise">
 	  | caseInsensitive<"normalize">

  dot
    = caseInsensitive<"dotproduct">
    | caseInsensitive<"dot">

  angleBetween
    = caseInsensitive<"angleBetween">

  cross
    = caseInsensitive<"crossproduct">
    | caseInsensitive<"cross">

  lerp
    = caseInsensitive<"lerp">
} 