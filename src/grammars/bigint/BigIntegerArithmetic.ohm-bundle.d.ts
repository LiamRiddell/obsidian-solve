// AUTOGENERATED FILE
// This file was generated from BigIntegerArithmetic.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface BigIntArithmeticActionDict<T> extends BaseActionDict<T> {
  Expression?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Bitwise_leftShift?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  Bitwise_unsignedRightShift?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  Bitwise_rightShift?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  Bitwise_AND?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  Bitwise_XOR?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  Bitwise_OR?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  Bitwise?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  AS_addition?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  AS_subtraction?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  AS?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  MD_multiplication?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  MD_division?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  MD_remainder?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  MD?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  E_exponent?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  E?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  P_parenthesis?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  P?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Primitive?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  add?: (this: NonterminalNode, arg0: TerminalNode) => T;
  subtract?: (this: NonterminalNode, arg0: TerminalNode) => T;
  multiply?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  divide?: (this: NonterminalNode, arg0: TerminalNode) => T;
  remainder?: (this: NonterminalNode, arg0: TerminalNode) => T;
  exponent?: (this: NonterminalNode, arg0: TerminalNode) => T;
  binary?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
  binaryDigit?: (this: NonterminalNode, arg0: TerminalNode) => T;
  bigInteger?: (this: NonterminalNode, arg0: IterationNode) => T;
  hex?: (this: NonterminalNode, arg0: IterationNode | TerminalNode, arg1: IterationNode | TerminalNode) => T;
}

export interface BigIntArithmeticSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: BigIntArithmeticActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: BigIntArithmeticActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: BigIntArithmeticActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: BigIntArithmeticActionDict<T>): this;
}

export interface BigIntArithmeticGrammar extends Grammar {
  createSemantics(): BigIntArithmeticSemantics;
  extendSemantics(superSemantics: BigIntArithmeticSemantics): BigIntArithmeticSemantics;
}

declare const grammar: BigIntArithmeticGrammar;
export default grammar;

