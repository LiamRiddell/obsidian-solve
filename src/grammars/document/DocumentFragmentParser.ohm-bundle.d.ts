// AUTOGENERATED FILE
// This file was generated from DocumentFragmentParser.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface ObsidianMarkdownParserActionDict<T> extends BaseActionDict<T> {
  Element?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Header?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  Blockquote?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  HorizontalRule?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode, arg3: IterationNode, arg4: TerminalNode) => T;
  UnorderedList?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  OrderedList?: (this: NonterminalNode, arg0: IterationNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: NonterminalNode) => T;
  CodeStartOrEnd?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  Paragraph?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  nonEmptyLine?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode) => T;
  notNewline?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  spaces?: (this: NonterminalNode, arg0: IterationNode) => T;
  newline?: (this: NonterminalNode, arg0: TerminalNode) => T;
}

export interface ObsidianMarkdownParserSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: ObsidianMarkdownParserActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: ObsidianMarkdownParserActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: ObsidianMarkdownParserActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: ObsidianMarkdownParserActionDict<T>): this;
}

export interface ObsidianMarkdownParserGrammar extends Grammar {
  createSemantics(): ObsidianMarkdownParserSemantics;
  extendSemantics(superSemantics: ObsidianMarkdownParserSemantics): ObsidianMarkdownParserSemantics;
}

declare const grammar: ObsidianMarkdownParserGrammar;
export default grammar;

