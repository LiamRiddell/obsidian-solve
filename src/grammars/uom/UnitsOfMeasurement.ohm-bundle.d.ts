// AUTOGENERATED FILE
// This file was generated from UnitsOfMeasurement.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Namespace,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface BasicArithmeticActionDict<T> extends BaseActionDict<T> {
  Expression?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  LogicalShift_left?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  LogicalShift_right?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  LogicalShift?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  AS_addition?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  AS_subtraction?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  AS?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  MD_multiplication?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  MD_division?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  MD_modulo?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  MD?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  E_exponent?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  E?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  P_parenthesis?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  P?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Primitive_positive?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  Primitive_negative?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  Primitive?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  add?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  subtract?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  multiply?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  divide?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  modulo?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  exponent?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  constant?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  number_nonEnglish?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  number_nonEnglishDecimal?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  number_english?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  number_englishDecimal?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  number_whole?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  number?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  nonEnglishNumber?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: IterationNode, arg4: IterationNode, arg5: TerminalNode, arg6: NonterminalNode) => T;
  nonEnglishDecimal?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: IterationNode) => T;
  englishNumber?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: IterationNode, arg4: IterationNode, arg5: TerminalNode, arg6: NonterminalNode) => T;
  englishDecimal?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: IterationNode) => T;
  whole?: (this: NonterminalNode, arg0: IterationNode) => T;
  hex?: (this: NonterminalNode, arg0: IterationNode | TerminalNode, arg1: IterationNode | TerminalNode) => T;
}

export interface BasicArithmeticSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: BasicArithmeticActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: BasicArithmeticActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: BasicArithmeticActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: BasicArithmeticActionDict<T>): this;
}

export interface BasicArithmeticGrammar extends Grammar {
  createSemantics(): BasicArithmeticSemantics;
  extendSemantics(superSemantics: BasicArithmeticSemantics): BasicArithmeticSemantics;
}

export interface UnitsOfMeasurementArithmeticActionDict<T> extends BasicArithmeticActionDict<T> {
  Expression?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Primitive?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Conversion_best?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: NonterminalNode) => T;
  Conversion_convert?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: NonterminalNode) => T;
  Conversion?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ConversionPossiblities?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: IterationNode) => T;
  percentage?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode) => T;
  uom?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: NonterminalNode) => T;
  unit?: (this: NonterminalNode, arg0: TerminalNode) => T;
}

export interface UnitsOfMeasurementArithmeticSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: UnitsOfMeasurementArithmeticActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: UnitsOfMeasurementArithmeticActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: UnitsOfMeasurementArithmeticActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: UnitsOfMeasurementArithmeticActionDict<T>): this;
}

export interface UnitsOfMeasurementArithmeticGrammar extends Grammar {
  createSemantics(): UnitsOfMeasurementArithmeticSemantics;
  extendSemantics(superSemantics: UnitsOfMeasurementArithmeticSemantics): UnitsOfMeasurementArithmeticSemantics;
}

declare const ns: {
  BasicArithmetic: BasicArithmeticGrammar;
  UnitsOfMeasurementArithmetic: UnitsOfMeasurementArithmeticGrammar;
};
export default ns;

