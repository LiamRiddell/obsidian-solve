BasicArithmetic {
  Expression
    = LogicalShift

  LogicalShift
    = LogicalShift "<<" LogicalShift -- left
    | LogicalShift ">>" LogicalShift -- right
    | AS 

  // Addition or Subtraction
  AS
    = AS add MD  -- addition
    | AS subtract MD  -- subtraction
    | MD

  // Multiply or Divide
  MD
    = MD multiply E  -- multiplication
    | MD divide E  -- division
    | MD modulo E  -- modulo
    | E

  // Exponent
  E
    = P exponent E  -- exponent
    | P

  // Parenthesis
  P
    = "(" Expression ")"  -- parenthesis
    | Primitive
    
  Primitive
    = "+" Primitive -- positive
    | "-" Primitive -- negative
    | constant
    | hex
    | number
 
  // Lexical Rules
  add 
  	= "+"
    | caseInsensitive<"plus">
  	| caseInsensitive<"add">
    | caseInsensitive<"and">
    
  subtract 
    = "-"
    | caseInsensitive<"minus">
    | caseInsensitive<"subtract">
    | caseInsensitive<"remove">
    | caseInsensitive<"take">
      
  multiply 
    = "*"
    | "\\*" // Escaped \* for markdown
    | "\u{00D7}" // ร
    | caseInsensitive<"x">
    | caseInsensitive<"times by">
    | caseInsensitive<"times">
    | caseInsensitive<"multiply by">
    | caseInsensitive<"multiply">
      
  divide
    = "/"
    | "\u{00F7}" // รท
    | caseInsensitive<"divide by">
    | caseInsensitive<"divide">

  modulo
    = "%"
    | caseInsensitive<"modulo">
    | caseInsensitive<"mod">

  exponent
    = "^"
    | caseInsensitive<"to the power of">
    | caseInsensitive<"power of">
    | caseInsensitive<"exponent">
    | caseInsensitive<"prime">

  constant  
  	= caseInsensitive<"PI"> 
    | caseInsensitive<"E">

  number
  = nonEnglishNumber    -- nonEnglish
    | nonEnglishDecimal -- nonEnglishDecimal
    | englishNumber     -- english
    | englishDecimal    -- englishDecimal
    | whole             -- whole

  nonEnglishNumber
    = &(whole ".") whole ("." whole)* ("," whole)
    
  nonEnglishDecimal
    = whole "," digit+ ~"."

  englishNumber
    = &(whole ",") whole ("," whole)* ("." whole)

  englishDecimal
    = whole "." digit+

  whole
    = digit+

  hex
    = "0x" hexDigit+
    | hexDigit+ "h"
} 